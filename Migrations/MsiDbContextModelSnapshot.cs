// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace pwr_msi.Migrations {
    [DbContext(contextType: typeof(MsiDbContext))]
    internal class MsiDbContextModelSnapshot : ModelSnapshot {
        protected override void BuildModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation(annotation: "Relational:MaxIdentifierLength", value: 63)
                .HasAnnotation(annotation: "ProductVersion", value: "5.0.4")
                .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                    NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity(name: "AddressUser", buildAction: b => {
                b.Property<int>(propertyName: "AddressesAddressId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "UsersUserId")
                    .HasColumnType(typeName: "integer");

                b.HasKey("AddressesAddressId", "UsersUserId");

                b.HasIndex("UsersUserId");

                b.ToTable(name: "AddressUser");
            });

            modelBuilder.Entity(name: "CuisineRestaurant", buildAction: b => {
                b.Property<int>(propertyName: "CuisinesCuisineId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "RestaurantsRestaurantId")
                    .HasColumnType(typeName: "integer");

                b.HasKey("CuisinesCuisineId", "RestaurantsRestaurantId");

                b.HasIndex("RestaurantsRestaurantId");

                b.ToTable(name: "CuisineRestaurant");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.Address", buildAction: b => {
                b.Property<int>(propertyName: "AddressId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>(propertyName: "Addressee")
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "City")
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "Country")
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "FirstLine")
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "PostCode")
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "SecondLine")
                    .HasColumnType(typeName: "text");

                b.HasKey("AddressId");

                b.ToTable(name: "Addresses");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.BalanceRepayment", buildAction: b => {
                b.Property<int>(propertyName: "BalanceRepaymentId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<decimal>(propertyName: "Amount")
                    .HasColumnType(typeName: "numeric");

                b.Property<string>(propertyName: "ErrorMessage")
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "ExternalRepaymentId")
                    .HasColumnType(typeName: "text");

                b.Property<int>(propertyName: "Status")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "UserId")
                    .HasColumnType(typeName: "integer");

                b.HasKey("BalanceRepaymentId");

                b.HasIndex("UserId");

                b.ToTable(name: "BalanceRepayments");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.Cuisine", buildAction: b => {
                b.Property<int>(propertyName: "CuisineId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>(propertyName: "Name")
                    .HasColumnType(typeName: "text");

                b.HasKey("CuisineId");

                b.ToTable(name: "Cuisines");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuCategory", buildAction: b => {
                b.Property<int>(propertyName: "MenuCategoryId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>(propertyName: "Name")
                    .HasColumnType(typeName: "text");

                b.Property<int>(propertyName: "RestaurantId")
                    .HasColumnType(typeName: "integer");

                b.Property<ZonedDateTime>(propertyName: "ValidFrom")
                    .HasColumnType(typeName: "timestamp with time zone");

                b.Property<ZonedDateTime>(propertyName: "ValidUntil")
                    .HasColumnType(typeName: "timestamp with time zone");

                b.HasKey("MenuCategoryId");

                b.HasIndex("RestaurantId");

                b.ToTable(name: "MenuCategories");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuItem", buildAction: b => {
                b.Property<int>(propertyName: "MenuItemId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<decimal>(propertyName: "Amount")
                    .HasColumnType(typeName: "numeric");

                b.Property<int>(propertyName: "AmountUnit")
                    .HasColumnType(typeName: "integer");

                b.Property<string>(propertyName: "Description")
                    .HasColumnType(typeName: "text");

                b.Property<int>(propertyName: "MenuCategoryId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "MenuOrder")
                    .HasColumnType(typeName: "integer");

                b.Property<string>(propertyName: "Name")
                    .HasColumnType(typeName: "text");

                b.Property<decimal>(propertyName: "Price")
                    .HasColumnType(typeName: "numeric");

                b.Property<ZonedDateTime>(propertyName: "ValidFrom")
                    .HasColumnType(typeName: "timestamp with time zone");

                b.Property<ZonedDateTime>(propertyName: "ValidUntil")
                    .HasColumnType(typeName: "timestamp with time zone");

                b.HasKey("MenuItemId");

                b.HasIndex("MenuCategoryId");

                b.ToTable(name: "MenuItems");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuItemOptionItem", buildAction: b => {
                b.Property<int>(propertyName: "MenuItemOptionItemId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>(propertyName: "MenuItemOptionListId")
                    .HasColumnType(typeName: "integer");

                b.Property<string>(propertyName: "Name")
                    .HasColumnType(typeName: "text");

                b.Property<decimal>(propertyName: "Price")
                    .HasColumnType(typeName: "numeric");

                b.HasKey("MenuItemOptionItemId");

                b.HasIndex("MenuItemOptionListId");

                b.ToTable(name: "MenuItemOptionItems");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuItemOptionList", buildAction: b => {
                b.Property<int>(propertyName: "MenuItemOptionListId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<bool>(propertyName: "IsMultipleChoice")
                    .HasColumnType(typeName: "boolean");

                b.Property<int>(propertyName: "MenuItemId")
                    .HasColumnType(typeName: "integer");

                b.Property<string>(propertyName: "Name")
                    .HasColumnType(typeName: "text");

                b.HasKey("MenuItemOptionListId");

                b.HasIndex("MenuItemId");

                b.ToTable(name: "MenuItemOptionLists");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.Order", buildAction: b => {
                b.Property<int>(propertyName: "OrderId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>(propertyName: "AddressId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "CustomerId")
                    .HasColumnType(typeName: "integer");

                b.Property<string>(propertyName: "DeliveryNotes")
                    .HasColumnType(typeName: "text");

                b.Property<int?>(propertyName: "DeliveryPersonId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "RestaurantId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "Status")
                    .HasColumnType(typeName: "integer");

                b.Property<decimal>(propertyName: "TotalPrice")
                    .HasColumnType(typeName: "numeric");

                b.HasKey("OrderId");

                b.HasIndex("AddressId");

                b.HasIndex("CustomerId");

                b.HasIndex("DeliveryPersonId");

                b.HasIndex("RestaurantId");

                b.ToTable(name: "Orders");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.OrderItem", buildAction: b => {
                b.Property<int>(propertyName: "OrderItemId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<decimal>(propertyName: "Amount")
                    .HasColumnType(typeName: "numeric");

                b.Property<int>(propertyName: "MenuItemId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "OrderId")
                    .HasColumnType(typeName: "integer");

                b.Property<decimal>(propertyName: "TotalPrice")
                    .HasColumnType(typeName: "numeric");

                b.HasKey("OrderItemId");

                b.HasIndex("MenuItemId");

                b.HasIndex("OrderId");

                b.ToTable(name: "OrderItems");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.OrderItemCustomization", buildAction: b => {
                b.Property<int>(propertyName: "OrderItemCustomizationId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>(propertyName: "MenuItemOptionItemId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "OrderItemId")
                    .HasColumnType(typeName: "integer");

                b.HasKey("OrderItemCustomizationId");

                b.HasIndex("MenuItemOptionItemId");

                b.HasIndex("OrderItemId");

                b.ToTable(name: "OrderItemCustomizations");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.OrderTask", buildAction: b => {
                b.Property<int>(propertyName: "OrderTaskId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>(propertyName: "AssigneeRestaurantId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "AssigneeType")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "AssigneeUserId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "CompletedById")
                    .HasColumnType(typeName: "integer");

                b.Property<ZonedDateTime>(propertyName: "DateCompleted")
                    .HasColumnType(typeName: "timestamp with time zone");

                b.Property<int>(propertyName: "Task")
                    .HasColumnType(typeName: "integer");

                b.HasKey("OrderTaskId");

                b.HasIndex("AssigneeRestaurantId");

                b.HasIndex("AssigneeUserId");

                b.HasIndex("CompletedById");

                b.ToTable(name: "OrderTasks");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.Payment", buildAction: b => {
                b.Property<int>(propertyName: "PaymentId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<decimal>(propertyName: "Amount")
                    .HasColumnType(typeName: "numeric");

                b.Property<string>(propertyName: "ErrorMessage")
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "ExternalPaymentId")
                    .HasColumnType(typeName: "text");

                b.Property<bool>(propertyName: "IsFromBalance")
                    .HasColumnType(typeName: "boolean");

                b.Property<bool>(propertyName: "IsReturn")
                    .HasColumnType(typeName: "boolean");

                b.Property<int>(propertyName: "OrderId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "Status")
                    .HasColumnType(typeName: "integer");

                b.Property<int?>(propertyName: "UserId")
                    .HasColumnType(typeName: "integer");

                b.HasKey("PaymentId");

                b.HasIndex("OrderId");

                b.HasIndex("UserId");

                b.ToTable(name: "Payments");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.Restaurant", buildAction: b => {
                b.Property<int>(propertyName: "RestaurantId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>(propertyName: "AddressId")
                    .HasColumnType(typeName: "integer");

                b.Property<string>(propertyName: "Description")
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "Name")
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "Website")
                    .HasColumnType(typeName: "text");

                b.HasKey("RestaurantId");

                b.HasIndex("AddressId");

                b.ToTable(name: "Restaurants");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.RestaurantUser", buildAction: b => {
                b.Property<int>(propertyName: "RestaurantId")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "UserId")
                    .HasColumnType(typeName: "integer");

                b.Property<bool>(propertyName: "CanAcceptOrders")
                    .HasColumnType(typeName: "boolean");

                b.Property<bool>(propertyName: "CanDeliverOrders")
                    .HasColumnType(typeName: "boolean");

                b.Property<bool>(propertyName: "CanManage")
                    .HasColumnType(typeName: "boolean");

                b.HasKey("RestaurantId", "UserId");

                b.HasIndex("UserId");

                b.ToTable(name: "RestaurantUsers");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.User", buildAction: b => {
                b.Property<int>(propertyName: "UserId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<decimal>(propertyName: "Balance")
                    .HasColumnType(typeName: "numeric");

                b.Property<int?>(propertyName: "BillingAddressId")
                    .HasColumnType(typeName: "integer");

                b.Property<string>(propertyName: "Email")
                    .IsRequired()
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "FirstName")
                    .IsRequired()
                    .HasColumnType(typeName: "text");

                b.Property<bool>(propertyName: "IsActive")
                    .HasColumnType(typeName: "boolean");

                b.Property<bool>(propertyName: "IsAdmin")
                    .HasColumnType(typeName: "boolean");

                b.Property<bool>(propertyName: "IsVerified")
                    .HasColumnType(typeName: "boolean");

                b.Property<string>(propertyName: "LastName")
                    .IsRequired()
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "Password")
                    .IsRequired()
                    .HasColumnType(typeName: "text");

                b.Property<string>(propertyName: "Username")
                    .IsRequired()
                    .HasColumnType(typeName: "text");

                b.HasKey("UserId");

                b.HasIndex("BillingAddressId");

                b.HasIndex("Email")
                    .IsUnique();

                b.HasIndex("Username")
                    .IsUnique();

                b.ToTable(name: "Users");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.VerificationToken", buildAction: b => {
                b.Property<int>(propertyName: "VerificationTokenId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType(typeName: "integer")
                    .HasAnnotation(annotation: "Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<bool>(propertyName: "IsUsed")
                    .HasColumnType(typeName: "boolean");

                b.Property<string>(propertyName: "Token")
                    .HasColumnType(typeName: "text");

                b.Property<int>(propertyName: "TokenType")
                    .HasColumnType(typeName: "integer");

                b.Property<int>(propertyName: "UserId")
                    .HasColumnType(typeName: "integer");

                b.Property<Instant>(propertyName: "ValidUntil")
                    .HasColumnType(typeName: "timestamp");

                b.HasKey("VerificationTokenId");

                b.HasIndex("UserId");

                b.ToTable(name: "VerificationTokens");
            });

            modelBuilder.Entity(name: "AddressUser", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.Address", navigationName: null)
                    .WithMany()
                    .HasForeignKey("AddressesAddressId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.User", navigationName: null)
                    .WithMany()
                    .HasForeignKey("UsersUserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity(name: "CuisineRestaurant", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.Cuisine", navigationName: null)
                    .WithMany()
                    .HasForeignKey("CuisinesCuisineId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.Restaurant", navigationName: null)
                    .WithMany()
                    .HasForeignKey("RestaurantsRestaurantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity(name: "pwr_msi.Models.BalanceRepayment", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.User", navigationName: "User")
                    .WithMany(collection: "BalanceRepayments")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "User");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuCategory", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.Restaurant", navigationName: "Restaurant")
                    .WithMany(collection: "MenuCategories")
                    .HasForeignKey("RestaurantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "Restaurant");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuItem", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.MenuCategory", navigationName: "MenuCategory")
                    .WithMany(collection: "Items")
                    .HasForeignKey("MenuCategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "MenuCategory");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuItemOptionItem", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.MenuItemOptionList", navigationName: "MenuItemOptionList")
                    .WithMany(collection: "Items")
                    .HasForeignKey("MenuItemOptionListId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "MenuItemOptionList");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuItemOptionList", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.MenuItem", navigationName: "MenuItem")
                    .WithMany(collection: "Options")
                    .HasForeignKey("MenuItemId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "MenuItem");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.Order", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.Address", navigationName: "Address")
                    .WithMany()
                    .HasForeignKey("AddressId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.User", navigationName: "Customer")
                    .WithMany()
                    .HasForeignKey("CustomerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.User", navigationName: "DeliveryPerson")
                    .WithMany()
                    .HasForeignKey("DeliveryPersonId");

                b.HasOne(relatedTypeName: "pwr_msi.Models.Restaurant", navigationName: "Restaurant")
                    .WithMany()
                    .HasForeignKey("RestaurantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "Address");

                b.Navigation(navigationName: "Customer");

                b.Navigation(navigationName: "DeliveryPerson");

                b.Navigation(navigationName: "Restaurant");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.OrderItem", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.MenuItem", navigationName: "MenuItem")
                    .WithMany()
                    .HasForeignKey("MenuItemId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.Order", navigationName: "Order")
                    .WithMany()
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "MenuItem");

                b.Navigation(navigationName: "Order");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.OrderItemCustomization", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.MenuItemOptionItem", navigationName: "MenuItemOptionItem")
                    .WithMany()
                    .HasForeignKey("MenuItemOptionItemId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.OrderItem", navigationName: "OrderItem")
                    .WithMany()
                    .HasForeignKey("OrderItemId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "MenuItemOptionItem");

                b.Navigation(navigationName: "OrderItem");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.OrderTask", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.Restaurant", navigationName: "AssigneeRestaurant")
                    .WithMany()
                    .HasForeignKey("AssigneeRestaurantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.User", navigationName: "AssigneeUser")
                    .WithMany()
                    .HasForeignKey("AssigneeUserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.User", navigationName: "CompletedBy")
                    .WithMany()
                    .HasForeignKey("CompletedById")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "AssigneeRestaurant");

                b.Navigation(navigationName: "AssigneeUser");

                b.Navigation(navigationName: "CompletedBy");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.Payment", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.Order", navigationName: "Order")
                    .WithMany()
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.User", navigationName: null)
                    .WithMany(collection: "Payments")
                    .HasForeignKey("UserId");

                b.Navigation(navigationName: "Order");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.Restaurant", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.Address", navigationName: "Address")
                    .WithMany()
                    .HasForeignKey("AddressId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "Address");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.RestaurantUser", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.Restaurant", navigationName: "Restaurant")
                    .WithMany(collection: "RestaurantUsers")
                    .HasForeignKey("RestaurantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne(relatedTypeName: "pwr_msi.Models.User", navigationName: "User")
                    .WithMany(collection: "RestaurantUsers")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "Restaurant");

                b.Navigation(navigationName: "User");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.User", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.Address", navigationName: "BillingAddress")
                    .WithMany()
                    .HasForeignKey("BillingAddressId");

                b.Navigation(navigationName: "BillingAddress");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.VerificationToken", buildAction: b => {
                b.HasOne(relatedTypeName: "pwr_msi.Models.User", navigationName: "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation(navigationName: "User");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuCategory",
                buildAction: b => { b.Navigation(navigationName: "Items"); });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuItem",
                buildAction: b => { b.Navigation(navigationName: "Options"); });

            modelBuilder.Entity(name: "pwr_msi.Models.MenuItemOptionList",
                buildAction: b => { b.Navigation(navigationName: "Items"); });

            modelBuilder.Entity(name: "pwr_msi.Models.Restaurant", buildAction: b => {
                b.Navigation(navigationName: "MenuCategories");

                b.Navigation(navigationName: "RestaurantUsers");
            });

            modelBuilder.Entity(name: "pwr_msi.Models.User", buildAction: b => {
                b.Navigation(navigationName: "BalanceRepayments");

                b.Navigation(navigationName: "Payments");

                b.Navigation(navigationName: "RestaurantUsers");
            });
#pragma warning restore 612, 618
        }
    }
}
